{
  "version": 3,
  "sources": ["../../@scure/base/index.ts"],
  "sourcesContent": ["/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\nexport interface Coder<F, T> {\r\n  encode(from: F): T;\r\n  decode(to: T): F;\r\n}\r\n\r\nexport interface BytesCoder extends Coder<Uint8Array, string> {\r\n  encode: (data: Uint8Array) => string;\r\n  decode: (str: string) => Uint8Array;\r\n}\r\n\r\nfunction isBytes(a: unknown): a is Uint8Array {\r\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\r\n}\r\n/** Asserts something is Uint8Array. */\r\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\r\n}\r\n\r\nfunction isArrayOf(isString: boolean, arr: any[]) {\r\n  if (!Array.isArray(arr)) return false;\r\n  if (arr.length === 0) return true;\r\n  if (isString) {\r\n    return arr.every((item) => typeof item === 'string');\r\n  } else {\r\n    return arr.every((item) => Number.isSafeInteger(item));\r\n  }\r\n}\r\n\r\n// no abytes: seems to have 10% slowdown. Why?!\r\n\r\nfunction afn(input: Function): input is Function {\r\n  if (typeof input !== 'function') throw new Error('function expected');\r\n  return true;\r\n}\r\n\r\nfunction astr(label: string, input: unknown): input is string {\r\n  if (typeof input !== 'string') throw new Error(`${label}: string expected`);\r\n  return true;\r\n}\r\n\r\nfunction anumber(n: number): void {\r\n  if (!Number.isSafeInteger(n)) throw new Error(`invalid integer: ${n}`);\r\n}\r\n\r\nfunction aArr(input: any[]) {\r\n  if (!Array.isArray(input)) throw new Error('array expected');\r\n}\r\nfunction astrArr(label: string, input: string[]) {\r\n  if (!isArrayOf(true, input)) throw new Error(`${label}: array of strings expected`);\r\n}\r\nfunction anumArr(label: string, input: number[]) {\r\n  if (!isArrayOf(false, input)) throw new Error(`${label}: array of numbers expected`);\r\n}\r\n\r\n// TODO: some recusive type inference so it would check correct order of input/output inside rest?\r\n// like <string, number>, <number, bytes>, <bytes, float>\r\ntype Chain = [Coder<any, any>, ...Coder<any, any>[]];\r\n// Extract info from Coder type\r\ntype Input<F> = F extends Coder<infer T, any> ? T : never;\r\ntype Output<F> = F extends Coder<any, infer T> ? T : never;\r\n// Generic function for arrays\r\ntype First<T> = T extends [infer U, ...any[]] ? U : never;\r\ntype Last<T> = T extends [...any[], infer U] ? U : never;\r\ntype Tail<T> = T extends [any, ...infer U] ? U : never;\r\n\r\ntype AsChain<C extends Chain, Rest = Tail<C>> = {\r\n  // C[K] = Coder<Input<C[K]>, Input<Rest[k]>>\r\n  [K in keyof C]: Coder<Input<C[K]>, Input<K extends keyof Rest ? Rest[K] : any>>;\r\n};\r\n\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction chain<T extends Chain & AsChain<T>>(...args: T): Coder<Input<First<T>>, Output<Last<T>>> {\r\n  const id = (a: any) => a;\r\n  // Wrap call in closure so JIT can inline calls\r\n  const wrap = (a: any, b: any) => (c: any) => a(b(c));\r\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\r\n  const encode = args.map((x) => x.encode).reduceRight(wrap, id);\r\n  // Construct chain of args[0].decode(args[1].decode(...))\r\n  const decode = args.map((x) => x.decode).reduce(wrap, id);\r\n  return { encode, decode };\r\n}\r\n\r\n/**\r\n * Encodes integer radix representation to array of strings using alphabet and back.\r\n * Could also be array of strings.\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction alphabet(letters: string | string[]): Coder<number[], string[]> {\r\n  // mapping 1 to \"b\"\r\n  const lettersA = typeof letters === 'string' ? letters.split('') : letters;\r\n  const len = lettersA.length;\r\n  astrArr('alphabet', lettersA);\r\n\r\n  // mapping \"b\" to 1\r\n  const indexes = new Map(lettersA.map((l, i) => [l, i]));\r\n  return {\r\n    encode: (digits: number[]) => {\r\n      aArr(digits);\r\n      return digits.map((i) => {\r\n        if (!Number.isSafeInteger(i) || i < 0 || i >= len)\r\n          throw new Error(\r\n            `alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`\r\n          );\r\n        return lettersA[i]!;\r\n      });\r\n    },\r\n    decode: (input: string[]): number[] => {\r\n      aArr(input);\r\n      return input.map((letter) => {\r\n        astr('alphabet.decode', letter);\r\n        const i = indexes.get(letter);\r\n        if (i === undefined) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\r\n        return i;\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction join(separator = ''): Coder<string[], string> {\r\n  astr('join', separator);\r\n  return {\r\n    encode: (from) => {\r\n      astrArr('join.decode', from);\r\n      return from.join(separator);\r\n    },\r\n    decode: (to) => {\r\n      astr('join.decode', to);\r\n      return to.split(separator);\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Pad strings array so it has integer number of bits\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction padding(bits: number, chr = '='): Coder<string[], string[]> {\r\n  anumber(bits);\r\n  astr('padding', chr);\r\n  return {\r\n    encode(data: string[]): string[] {\r\n      astrArr('padding.encode', data);\r\n      while ((data.length * bits) % 8) data.push(chr);\r\n      return data;\r\n    },\r\n    decode(input: string[]): string[] {\r\n      astrArr('padding.decode', input);\r\n      let end = input.length;\r\n      if ((end * bits) % 8)\r\n        throw new Error('padding: invalid, string should have whole number of bytes');\r\n      for (; end > 0 && input[end - 1] === chr; end--) {\r\n        const last = end - 1;\r\n        const byte = last * bits;\r\n        if (byte % 8 === 0) throw new Error('padding: invalid, string has too much padding');\r\n      }\r\n      return input.slice(0, end);\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction normalize<T>(fn: (val: T) => T): Coder<T, T> {\r\n  afn(fn);\r\n  return { encode: (from: T) => from, decode: (to: T) => fn(to) };\r\n}\r\n\r\n/**\r\n * Slow: O(n^2) time complexity\r\n */\r\nfunction convertRadix(data: number[], from: number, to: number): number[] {\r\n  // base 1 is impossible\r\n  if (from < 2) throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\r\n  if (to < 2) throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\r\n  aArr(data);\r\n  if (!data.length) return [];\r\n  let pos = 0;\r\n  const res = [];\r\n  const digits = Array.from(data, (d) => {\r\n    anumber(d);\r\n    if (d < 0 || d >= from) throw new Error(`invalid integer: ${d}`);\r\n    return d;\r\n  });\r\n  const dlen = digits.length;\r\n  while (true) {\r\n    let carry = 0;\r\n    let done = true;\r\n    for (let i = pos; i < dlen; i++) {\r\n      const digit = digits[i]!;\r\n      const fromCarry = from * carry;\r\n      const digitBase = fromCarry + digit;\r\n      if (\r\n        !Number.isSafeInteger(digitBase) ||\r\n        fromCarry / from !== carry ||\r\n        digitBase - digit !== fromCarry\r\n      ) {\r\n        throw new Error('convertRadix: carry overflow');\r\n      }\r\n      const div = digitBase / to;\r\n      carry = digitBase % to;\r\n      const rounded = Math.floor(div);\r\n      digits[i] = rounded;\r\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\r\n        throw new Error('convertRadix: carry overflow');\r\n      if (!done) continue;\r\n      else if (!rounded) pos = i;\r\n      else done = false;\r\n    }\r\n    res.push(carry);\r\n    if (done) break;\r\n  }\r\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\r\n  return res.reverse();\r\n}\r\n\r\nconst gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\r\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from: number, to: number) =>\r\n  from + (to - gcd(from, to));\r\nconst powers: number[] = /* @__PURE__ */ (() => {\r\n  let res = [];\r\n  for (let i = 0; i < 40; i++) res.push(2 ** i);\r\n  return res;\r\n})();\r\n/**\r\n * Implemented with numbers, because BigInt is 5x slower\r\n */\r\nfunction convertRadix2(data: number[], from: number, to: number, padding: boolean): number[] {\r\n  aArr(data);\r\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\r\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\r\n  if (radix2carry(from, to) > 32) {\r\n    throw new Error(\r\n      `convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`\r\n    );\r\n  }\r\n  let carry = 0;\r\n  let pos = 0; // bitwise position in current element\r\n  const max = powers[from]!;\r\n  const mask = powers[to]! - 1;\r\n  const res: number[] = [];\r\n  for (const n of data) {\r\n    anumber(n);\r\n    if (n >= max) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\r\n    carry = (carry << from) | n;\r\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\r\n    pos += from;\r\n    for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);\r\n    const pow = powers[pos];\r\n    if (pow === undefined) throw new Error('invalid carry');\r\n    carry &= pow - 1; // clean carry, otherwise it will cause overflow\r\n  }\r\n  carry = (carry << (to - pos)) & mask;\r\n  if (!padding && pos >= from) throw new Error('Excess padding');\r\n  if (!padding && carry > 0) throw new Error(`Non-zero padding: ${carry}`);\r\n  if (padding && pos > 0) res.push(carry >>> 0);\r\n  return res;\r\n}\r\n\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction radix(num: number): Coder<Uint8Array, number[]> {\r\n  anumber(num);\r\n  const _256 = 2 ** 8;\r\n  return {\r\n    encode: (bytes: Uint8Array) => {\r\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\r\n      return convertRadix(Array.from(bytes), _256, num);\r\n    },\r\n    decode: (digits: number[]) => {\r\n      anumArr('radix.decode', digits);\r\n      return Uint8Array.from(convertRadix(digits, num, _256));\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * If both bases are power of same number (like `2**8 <-> 2**64`),\r\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction radix2(bits: number, revPadding = false): Coder<Uint8Array, number[]> {\r\n  anumber(bits);\r\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\r\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\r\n    throw new Error('radix2: carry overflow');\r\n  return {\r\n    encode: (bytes: Uint8Array) => {\r\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\r\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\r\n    },\r\n    decode: (digits: number[]) => {\r\n      anumArr('radix2.decode', digits);\r\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\r\n    },\r\n  };\r\n}\r\n\r\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\r\nfunction unsafeWrapper<T extends (...args: any) => any>(fn: T) {\r\n  afn(fn);\r\n  return function (...args: ArgumentTypes<T>): ReturnType<T> | void {\r\n    try {\r\n      return fn.apply(null, args);\r\n    } catch (e) {}\r\n  };\r\n}\r\n\r\nfunction checksum(\r\n  len: number,\r\n  fn: (data: Uint8Array) => Uint8Array\r\n): Coder<Uint8Array, Uint8Array> {\r\n  anumber(len);\r\n  afn(fn);\r\n  return {\r\n    encode(data: Uint8Array) {\r\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\r\n      const sum = fn(data).slice(0, len);\r\n      const res = new Uint8Array(data.length + len);\r\n      res.set(data);\r\n      res.set(sum, data.length);\r\n      return res;\r\n    },\r\n    decode(data: Uint8Array) {\r\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\r\n      const payload = data.slice(0, -len);\r\n      const oldChecksum = data.slice(-len);\r\n      const newChecksum = fn(payload).slice(0, len);\r\n      for (let i = 0; i < len; i++)\r\n        if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\r\n      return payload;\r\n    },\r\n  };\r\n}\r\n\r\n// prettier-ignore\r\nexport const utils: { alphabet: typeof alphabet; chain: typeof chain; checksum: typeof checksum; convertRadix: typeof convertRadix; convertRadix2: typeof convertRadix2; radix: typeof radix; radix2: typeof radix2; join: typeof join; padding: typeof padding; } = {\r\n  alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\r\n};\r\n\r\n// RFC 4648 aka RFC 3548\r\n// ---------------------\r\n\r\n/**\r\n * base16 encoding from RFC 4648.\r\n * @example\r\n * ```js\r\n * base16.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => '12AB'\r\n * ```\r\n */\r\nexport const base16: BytesCoder = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\r\n\r\n/**\r\n * base32 encoding from RFC 4648. Has padding.\r\n * Use `base32nopad` for unpadded version.\r\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\r\n * @example\r\n * ```js\r\n * base32.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => 'CKVQ===='\r\n * base32.decode('CKVQ====');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base32: BytesCoder = chain(\r\n  radix2(5),\r\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\r\n  padding(5),\r\n  join('')\r\n);\r\n\r\n/**\r\n * base32 encoding from RFC 4648. No padding.\r\n * Use `base32` for padded version.\r\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\r\n * @example\r\n * ```js\r\n * base32nopad.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => 'CKVQ'\r\n * base32nopad.decode('CKVQ');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base32nopad: BytesCoder = chain(\r\n  radix2(5),\r\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\r\n  join('')\r\n);\r\n/**\r\n * base32 encoding from RFC 4648. Padded. Compared to ordinary `base32`, slightly different alphabet.\r\n * Use `base32hexnopad` for unpadded version.\r\n * @example\r\n * ```js\r\n * base32hex.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => '2ALG===='\r\n * base32hex.decode('2ALG====');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base32hex: BytesCoder = chain(\r\n  radix2(5),\r\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\r\n  padding(5),\r\n  join('')\r\n);\r\n\r\n/**\r\n * base32 encoding from RFC 4648. No padding. Compared to ordinary `base32`, slightly different alphabet.\r\n * Use `base32hex` for padded version.\r\n * @example\r\n * ```js\r\n * base32hexnopad.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => '2ALG'\r\n * base32hexnopad.decode('2ALG');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base32hexnopad: BytesCoder = chain(\r\n  radix2(5),\r\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\r\n  join('')\r\n);\r\n/**\r\n * base32 encoding from RFC 4648. Doug Crockford's version.\r\n * https://www.crockford.com/base32.html\r\n * @example\r\n * ```js\r\n * base32crockford.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => '2ANG'\r\n * base32crockford.decode('2ANG');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base32crockford: BytesCoder = chain(\r\n  radix2(5),\r\n  alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),\r\n  join(''),\r\n  normalize((s: string) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))\r\n);\r\n\r\n// Built-in base64 conversion https://caniuse.com/mdn-javascript_builtins_uint8array_frombase64\r\n// TODO: temporarily set to false, trying to understand bugs\r\n// prettier-ignore\r\nconst hasBase64Builtin: boolean = /* @__PURE__ */ (() =>\r\n  typeof (Uint8Array as any).from([]).toBase64 === 'function' &&\r\n  typeof (Uint8Array as any).fromBase64 === 'function')();\r\n\r\n/**\r\n * base64 from RFC 4648. Padded.\r\n * Use `base64nopad` for unpadded version.\r\n * Also check out `base64url`, `base64urlnopad`.\r\n * Falls back to built-in function, when available.\r\n * @example\r\n * ```js\r\n * base64.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => 'Eqs='\r\n * base64.decode('Eqs=');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\n// prettier-ignore\r\nexport const base64: BytesCoder = hasBase64Builtin ? {\r\n  encode(b) { abytes(b); return (b as any).toBase64(); },\r\n  decode(s) {\r\n    astr('base64', s); return (Uint8Array as any).fromBase64(s, { lastChunkHandling: 'strict' });\r\n  },\r\n} : chain(\r\n  radix2(6),\r\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\r\n  padding(6),\r\n  join('')\r\n);\r\n/**\r\n * base64 from RFC 4648. No padding.\r\n * Use `base64` for padded version.\r\n * @example\r\n * ```js\r\n * base64nopad.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => 'Eqs'\r\n * base64nopad.decode('Eqs');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base64nopad: BytesCoder = chain(\r\n  radix2(6),\r\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\r\n  join('')\r\n);\r\n\r\n/**\r\n * base64 from RFC 4648, using URL-safe alphabet. Padded.\r\n * Use `base64urlnopad` for unpadded version.\r\n * Falls back to built-in function, when available.\r\n * @example\r\n * ```js\r\n * base64url.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => 'Eqs='\r\n * base64url.decode('Eqs=');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\n// prettier-ignore\r\nexport const base64url: BytesCoder = hasBase64Builtin ? {\r\n  encode(b) { abytes(b); return (b as any).toBase64({ alphabet: 'base64url' }); },\r\n  decode(s) { astr('base64', s); return (Uint8Array as any).fromBase64(s, { alphabet: 'base64url' }); },\r\n} : chain(\r\n  radix2(6),\r\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\r\n  padding(6),\r\n  join('')\r\n);\r\n\r\n/**\r\n * base64 from RFC 4648, using URL-safe alphabet. No padding.\r\n * Use `base64url` for padded version.\r\n * @example\r\n * ```js\r\n * base64urlnopad.encode(Uint8Array.from([0x12, 0xab]));\r\n * // => 'Eqs'\r\n * base64urlnopad.decode('Eqs');\r\n * // => Uint8Array.from([0x12, 0xab])\r\n * ```\r\n */\r\nexport const base64urlnopad: BytesCoder = chain(\r\n  radix2(6),\r\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\r\n  join('')\r\n);\r\n\r\n// base58 code\r\n// -----------\r\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc: string) =>\r\n  chain(radix(58), alphabet(abc), join(''));\r\n\r\n/**\r\n * base58: base64 without ambigous characters +, /, 0, O, I, l.\r\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\r\n * @example\r\n * ```js\r\n * base58.decode('01abcdef');\r\n * // => '3UhJW'\r\n * ```\r\n */\r\nexport const base58: BytesCoder = genBase58(\r\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\n);\r\n/**\r\n * base58: flickr version. Check out `base58`.\r\n */\r\nexport const base58flickr: BytesCoder = genBase58(\r\n  '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\r\n);\r\n/**\r\n * base58: XRP version. Check out `base58`.\r\n */\r\nexport const base58xrp: BytesCoder = genBase58(\r\n  'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\r\n);\r\n\r\n// Data len (index) -> encoded block len\r\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\r\n\r\n/**\r\n * base58: XMR version. Check out `base58`.\r\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\r\n * Block encoding significantly reduces quadratic complexity of base58.\r\n */\r\nexport const base58xmr: BytesCoder = {\r\n  encode(data: Uint8Array) {\r\n    let res = '';\r\n    for (let i = 0; i < data.length; i += 8) {\r\n      const block = data.subarray(i, i + 8);\r\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length]!, '1');\r\n    }\r\n    return res;\r\n  },\r\n  decode(str: string) {\r\n    let res: number[] = [];\r\n    for (let i = 0; i < str.length; i += 11) {\r\n      const slice = str.slice(i, i + 11);\r\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\r\n      const block = base58.decode(slice);\r\n      for (let j = 0; j < block.length - blockLen; j++) {\r\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\r\n      }\r\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\r\n    }\r\n    return Uint8Array.from(res);\r\n  },\r\n};\r\n\r\n/**\r\n * Method, which creates base58check encoder.\r\n * Requires function, calculating sha256.\r\n */\r\nexport const createBase58check = (sha256: (data: Uint8Array) => Uint8Array): BytesCoder =>\r\n  chain(\r\n    checksum(4, (data) => sha256(sha256(data))),\r\n    base58\r\n  );\r\n\r\n/**\r\n * Use `createBase58check` instead.\r\n * @deprecated\r\n */\r\nexport const base58check: (sha256: (data: Uint8Array) => Uint8Array) => BytesCoder =\r\n  createBase58check;\r\n\r\n// Bech32 code\r\n// -----------\r\nexport interface Bech32Decoded<Prefix extends string = string> {\r\n  prefix: Prefix;\r\n  words: number[];\r\n}\r\nexport interface Bech32DecodedWithArray<Prefix extends string = string> {\r\n  prefix: Prefix;\r\n  words: number[];\r\n  bytes: Uint8Array;\r\n}\r\n\r\nconst BECH_ALPHABET: Coder<number[], string> = chain(\r\n  alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'),\r\n  join('')\r\n);\r\n\r\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\r\nfunction bech32Polymod(pre: number): number {\r\n  const b = pre >> 25;\r\n  let chk = (pre & 0x1ffffff) << 5;\r\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\r\n    if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i]!;\r\n  }\r\n  return chk;\r\n}\r\n\r\nfunction bechChecksum(prefix: string, words: number[], encodingConst = 1): string {\r\n  const len = prefix.length;\r\n  let chk = 1;\r\n  for (let i = 0; i < len; i++) {\r\n    const c = prefix.charCodeAt(i);\r\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\r\n    chk = bech32Polymod(chk) ^ (c >> 5);\r\n  }\r\n  chk = bech32Polymod(chk);\r\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\r\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\r\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\r\n  chk ^= encodingConst;\r\n  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]!], 30, 5, false));\r\n}\r\n\r\nexport interface Bech32 {\r\n  encode<Prefix extends string>(\r\n    prefix: Prefix,\r\n    words: number[] | Uint8Array,\r\n    limit?: number | false\r\n  ): `${Lowercase<Prefix>}1${string}`;\r\n  decode<Prefix extends string>(\r\n    str: `${Prefix}1${string}`,\r\n    limit?: number | false\r\n  ): Bech32Decoded<Prefix>;\r\n  encodeFromBytes(prefix: string, bytes: Uint8Array): string;\r\n  decodeToBytes(str: string): Bech32DecodedWithArray;\r\n  decodeUnsafe(str: string, limit?: number | false): void | Bech32Decoded<string>;\r\n  fromWords(to: number[]): Uint8Array;\r\n  fromWordsUnsafe(to: number[]): void | Uint8Array;\r\n  toWords(from: Uint8Array): number[];\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction genBech32(encoding: 'bech32' | 'bech32m'): Bech32 {\r\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\r\n  const _words = radix2(5);\r\n  const fromWords = _words.decode;\r\n  const toWords = _words.encode;\r\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\r\n\r\n  function encode<Prefix extends string>(\r\n    prefix: Prefix,\r\n    words: number[] | Uint8Array,\r\n    limit: number | false = 90\r\n  ): `${Lowercase<Prefix>}1${string}` {\r\n    astr('bech32.encode prefix', prefix);\r\n    if (isBytes(words)) words = Array.from(words);\r\n    anumArr('bech32.encode', words);\r\n    const plen = prefix.length;\r\n    if (plen === 0) throw new TypeError(`Invalid prefix length ${plen}`);\r\n    const actualLength = plen + 7 + words.length;\r\n    if (limit !== false && actualLength > limit)\r\n      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\r\n    const lowered = prefix.toLowerCase();\r\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\r\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}` as `${Lowercase<Prefix>}1${string}`;\r\n  }\r\n\r\n  function decode<Prefix extends string>(\r\n    str: `${Prefix}1${string}`,\r\n    limit?: number | false\r\n  ): Bech32Decoded<Prefix>;\r\n  function decode(str: string, limit?: number | false): Bech32Decoded;\r\n  function decode(str: string, limit: number | false = 90): Bech32Decoded {\r\n    astr('bech32.decode input', str);\r\n    const slen = str.length;\r\n    if (slen < 8 || (limit !== false && slen > limit))\r\n      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\r\n    // don't allow mixed case\r\n    const lowered = str.toLowerCase();\r\n    if (str !== lowered && str !== str.toUpperCase())\r\n      throw new Error(`String must be lowercase or uppercase`);\r\n    const sepIndex = lowered.lastIndexOf('1');\r\n    if (sepIndex === 0 || sepIndex === -1)\r\n      throw new Error(`Letter \"1\" must be present between prefix and data only`);\r\n    const prefix = lowered.slice(0, sepIndex);\r\n    const data = lowered.slice(sepIndex + 1);\r\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\r\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\r\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\r\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\r\n    return { prefix, words };\r\n  }\r\n\r\n  const decodeUnsafe = unsafeWrapper(decode);\r\n\r\n  function decodeToBytes(str: string): Bech32DecodedWithArray {\r\n    const { prefix, words } = decode(str, false);\r\n    return { prefix, words, bytes: fromWords(words) };\r\n  }\r\n\r\n  function encodeFromBytes(prefix: string, bytes: Uint8Array) {\r\n    return encode(prefix, toWords(bytes));\r\n  }\r\n\r\n  return {\r\n    encode,\r\n    decode,\r\n    encodeFromBytes,\r\n    decodeToBytes,\r\n    decodeUnsafe,\r\n    fromWords,\r\n    fromWordsUnsafe,\r\n    toWords,\r\n  };\r\n}\r\n\r\n/**\r\n * bech32 from BIP 173. Operates on words.\r\n * For high-level, check out scure-btc-signer:\r\n * https://github.com/paulmillr/scure-btc-signer.\r\n */\r\nexport const bech32: Bech32 = genBech32('bech32');\r\n\r\n/**\r\n * bech32m from BIP 350. Operates on words.\r\n * It was to mitigate `bech32` weaknesses.\r\n * For high-level, check out scure-btc-signer:\r\n * https://github.com/paulmillr/scure-btc-signer.\r\n */\r\nexport const bech32m: Bech32 = genBech32('bech32m');\r\n\r\ndeclare const TextEncoder: any;\r\ndeclare const TextDecoder: any;\r\n\r\n/**\r\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\r\n * @example\r\n * ```js\r\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\r\n * const str = utf8.encode(b); // \"hey\"\r\n * ```\r\n */\r\nexport const utf8: BytesCoder = {\r\n  encode: (data) => new TextDecoder().decode(data),\r\n  decode: (str) => new TextEncoder().encode(str),\r\n};\r\n\r\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\r\n// prettier-ignore\r\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\r\n  typeof (Uint8Array as any).from([]).toHex === 'function' &&\r\n  typeof (Uint8Array as any).fromHex === 'function')();\r\n// prettier-ignore\r\nconst hexBuiltin: BytesCoder = {\r\n  encode(data) { abytes(data); return (data as any).toHex(); },\r\n  decode(s) { astr('hex', s); return (Uint8Array as any).fromHex(s); },\r\n};\r\n/**\r\n * hex string decoder. Uses built-in function, when available.\r\n * @example\r\n * ```js\r\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\r\n * const str = hex.encode(b); // \"0102ff\"\r\n * ```\r\n */\r\nexport const hex: BytesCoder = hasHexBuiltin\r\n  ? hexBuiltin\r\n  : chain(\r\n      radix2(4),\r\n      alphabet('0123456789abcdef'),\r\n      join(''),\r\n      normalize((s: string) => {\r\n        if (typeof s !== 'string' || s.length % 2 !== 0)\r\n          throw new TypeError(\r\n            `hex.decode: expected string, got ${typeof s} with length ${s.length}`\r\n          );\r\n        return s.toLowerCase();\r\n      })\r\n    );\r\n\r\nexport type SomeCoders = {\r\n  utf8: BytesCoder;\r\n  hex: BytesCoder;\r\n  base16: BytesCoder;\r\n  base32: BytesCoder;\r\n  base64: BytesCoder;\r\n  base64url: BytesCoder;\r\n  base58: BytesCoder;\r\n  base58xmr: BytesCoder;\r\n};\r\n// prettier-ignore\r\nconst CODERS: SomeCoders = {\r\n  utf8, hex, base16, base32, base64, base64url, base58, base58xmr\r\n};\r\ntype CoderType = keyof SomeCoders;\r\nconst coderTypeError =\r\n  'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\r\n\r\n/** @deprecated */\r\nexport const bytesToString = (type: CoderType, bytes: Uint8Array): string => {\r\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\r\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\r\n  return CODERS[type].encode(bytes);\r\n};\r\n\r\n/** @deprecated */\r\nexport const str: (type: CoderType, bytes: Uint8Array) => string = bytesToString; // as in python, but for bytes only\r\n\r\n/** @deprecated */\r\nexport const stringToBytes = (type: CoderType, str: string): Uint8Array => {\r\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\r\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\r\n  return CODERS[type].decode(str);\r\n};\r\n/** @deprecated */\r\nexport const bytes: (type: CoderType, str: string) => Uint8Array = stringToBytes;\r\n"],
  "mappings": "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",
  "names": ["padding"]
}
